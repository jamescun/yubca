package config

// DN is a Distinguished Name as defined by RFC 4514 Section 3.
type DN struct {
	C  []string `json:"C"`
	O  []string `json:"O"`
	OU []string `json:"OU"`
	ST []string `json:"ST"`
	L  []string `json:"L"`
	CN string   `json:"CN"`
}

func (dn *DN) Validate() error {
	if dn.CN == "" {
		return &ValidationError{
			Field:   "CN",
			Help:    "A Common Name (CN) is required for all certificates.",
			Message: "CN is required",
		}
	}

	return nil
}

// CA configured the parameters for initializing and operation a Certificate
// Authority from a YubiKey.
type CA struct {
	// Slot is the PIV slot on the YubiKey that will store the certificate
	// authority and private key.
	Slot string `json:"slot"`

	// Algorithm specifies the cryptographic algorithm used to generate the
	// private key for the certificate.
	Algorithm string `json:"algorithm"`

	// Subject is the distinguished name identifier for the Certificate
	// Authority (also used for Issuer).
	Subject *DN `json:"subject"`

	// Validity is the duration of time before the Certificate Authority will
	// expire.
	Validity string `json:"validity"`

	// CRL is an array of URLs pointing to where the Certificate Revocation
	// Lists generated by yubca can be accessed.
	CRL []string `json:"crl"`
}

func (ca *CA) Validate() error {
	if ca.Slot == "" {
		return &ValidationError{
			Field:   "slot",
			Help:    "Your YubiKey has multiple different PIV slots for storing cryptographic\nmaterial defined in NIST 800-73-4 section 5.1\nhttps://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-73-4.pdf#page=32",
			Message: "slot is required",
		}
	}

	if ca.Algorithm == "" {
		return &ValidationError{
			Field:   "algorithm",
			Help:    "The algorithm defines what kind of private key is generated for your\ncertificate authority. Valid values include EC256, EC385, ED25519, RSA1024\nand RSA2048.",
			Message: "algorithm is required",
		}
	}

	if ca.Subject == nil {
		return &ValidationError{
			Field:   "subject",
			Message: "subject is required",
		}
	}

	if err := ca.Subject.Validate(); err != nil {
		return err
	}

	if ca.Validity == "" {
		return &ValidationError{
			Field:   "validity",
			Help:    "All certificates must have an expiry, this can be express is ns, ms, s, m or h.",
			Message: "validity is required",
		}
	}

	return nil
}

// ValidationError is returned when validation of a Certificate Authority's
// configuration fails.
type ValidationError struct {
	Field string

	Help string

	Message string
}

func (ve ValidationError) Error() string {
	return "ValidationError: " + ve.Field + ": " + ve.Message
}
